public class Player implements Runnable{
	
	private int id;
	private MVar<Integer> result;
	private Communicate comm;
	private Shapes rps;
	private Shapes holder;
	private int win, lose, draw;
	private int turns;
	private int NTURNS;
	private int temp, i=1;
	
	public Player(int id, int NTURNS, Communicate comm){
		this.id = id;
		this.NTURNS = NTURNS;
		this.comm = comm;
		result = new MVar<Integer>();
		win = lose = draw = turns = 0;
	}
	
	@Override
	public void run() {
		
		
		try {
			for(int i=1; i<=NTURNS; i++){
				turns++;
				holder = rps.randomShape();
				System.out.println("Player Class: Player " + this.getPlayerId() + " Shape: " + this.getShape());
				comm.putMessage(this);
				temp = result.takeMVar();
				if(temp == 1){
					win++;
				}else if(temp == 2){
					lose++;
				}else if(temp == 3){
					draw++;
				}
			}
			System.out.println("Player " + id + " Wins: " + win + " Draws: " + draw + " Losses: " + lose);
			
		} catch (InterruptedException e) {
			e.printStackTrace();
		}
		
	}
	
	public int getPlayerId(){
		return id;
	}
	
	public Shapes getShape(){
		return holder;
	}
	
	public MVar<Integer> getResult(){
		return result;
	}

}
