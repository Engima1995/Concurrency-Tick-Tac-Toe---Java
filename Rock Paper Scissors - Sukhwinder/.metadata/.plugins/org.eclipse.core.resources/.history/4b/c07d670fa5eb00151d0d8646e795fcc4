import java.util.concurrent.ArrayBlockingQueue;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.ScheduledExecutorService;
import java.util.concurrent.TimeUnit;

public class Game {
	
	public static void main(String[] args) throws InterruptedException, ExecutionException{
		
		Queue queue = new Queue(new ArrayBlockingQueue<Player>(2));
		Communicate c = new Communicate();
		int NTURNS = 1;
		int NPLAYERS = 10;
		int even;
		
		ScheduledExecutorService player = Executors.newScheduledThreadPool(NPLAYERS);
		ExecutorService referee = Executors.newSingleThreadExecutor();
		
		Future<?> fr = referee.submit(new Referee(queue, c));
		
		even = NPLAYERS % 2;
			
		if(NTURNS == 1 && even != 0){
			System.out.println("There are odd number of players and only 1 turn.");
			System.out.println("Try changing NPLAYERS to a even number to play.");
		}else{
			for(int i = 0; i<NPLAYERS; i++){
				player.schedule(new Player(i+1, NTURNS, c), 100, TimeUnit.MILLISECONDS);
			}
		}
		
		player.shutdown();
		if(player.awaitTermination(60, TimeUnit.SECONDS)){
			System.out.println("\nAll players have stopped playing.");
		}
		
		if(player.isShutdown()){
			fr.cancel(true);
		}
		
	}
	
}
